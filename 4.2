const express = require("express");
const app = express();
const port = 3000;

// Middleware to parse JSON request bodies
app.use(express.json());

// In-memory card data
let cards = [
  { id: 1, suit: "Hearts", value: "Ace" },
  { id: 2, suit: "Spades", value: "King" },
  { id: 3, suit: "Diamonds", value: "Queen" }
];

// Root endpoint
app.get("/", (req, res) => {
  res.send("Welcome to the Playing Cards API! Use /cards to get started.");
});

// Get all cards
app.get("/cards", (req, res) => {
  res.json(cards);
});

// Get a card by ID
app.get("/cards/:id", (req, res) => {
  const cardId = parseInt(req.params.id);
  if (isNaN(cardId)) {
    return res.status(400).json({ message: "Invalid card ID" });
  }

  const card = cards.find(c => c.id === cardId);
  if (!card) {
    return res.status(404).json({ message: "Card not found" });
  }

  res.json(card);
});

// Add a new card
app.post("/cards", (req, res) => {
  const { suit, value } = req.body;

  if (!suit || !value) {
    return res.status(400).json({ message: "Suit and value are required" });
  }

  const newCard = {
    id: cards.length ? cards[cards.length - 1].id + 1 : 1,
    suit,
    value
  };

  cards.push(newCard);
  res.status(201).json(newCard);
});

// Delete a card by ID
app.delete("/cards/:id", (req, res) => {
  const cardId = parseInt(req.params.id);
  if (isNaN(cardId)) {
    return res.status(400).json({ message: "Invalid card ID" });
  }

  const index = cards.findIndex(c => c.id === cardId);
  if (index === -1) {
    return res.status(404).json({ message: "Card not found" });
  }

  const removedCard = cards.splice(index, 1)[0];
  res.json({
    message: Card with ID ${removedCard.id} removed,
    card: removedCard
  });
});

// Start the server
app.listen(port, () => {
  console.log(Server running at http://localhost:${port});
});
